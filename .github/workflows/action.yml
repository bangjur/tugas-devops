name: Deploy Application
on: [push]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Check/Create requirements.txt
      run: |
        if [ ! -f "requirements.txt" ]; then
          echo "Creating requirements.txt with minimum required packages..."
          cat > requirements.txt << EOL
        pytest>=7.0.0
        flask>=2.0.0
        # Add any other packages your application needs
        EOL
        fi
        cat requirements.txt
    
    - name: Install Python dependencies
      run: |
        python3 -m venv venv
        source venv/bin/activate
        python3 -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          python3 -m pip install -r requirements.txt
        fi
    
    - name: Run tests
      run: |
        source venv/bin/activate
        if [ -d "tests" ]; then
          python3 -m pytest tests/
        else
          echo "No tests directory found. Skipping tests."
        fi
    
    - name: Deploy to server
      env:
        CURRENT_PROCESS: Deploy
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        SERVER_IP: ${{ secrets.SERVER_IP }}
      run: |
        # Set up SSH key with specific permissions
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        
        # Add server to known hosts
        ssh-keyscan -H -t rsa $SERVER_IP >> ~/.ssh/known_hosts
        
        # SSH connection with verbose output for debugging
        ssh -v -i ~/.ssh/id_ed25519 -o PreferredAuthentications=publickey $SSH_USERNAME@$SERVER_IP << 'EOF'
          # Update package list
          sudo apt-get update
          
          # Install Python3 and pip if not already installed
          if ! command -v python3 &> /dev/null; then
            echo "Installing Python3..."
            sudo apt-get install -y python3 python3-pip python3-venv
          fi
          
          # Install Nginx
          sudo apt install nginx
          
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt-get install -y ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            
            # Add current user to docker group
            sudo usermod -aG docker $USER
          fi
          
          # Install Docker Compose if not already installed
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo apt-get install -y docker-compose
          fi
          
          # Create and navigate to directory
          mkdir -p /home/ubuntu/presentasi-devops/
          cd /home/ubuntu/presentasi-devops/
          
          # Clone or update repository
          if [ ! -d "tugas-devops" ]; then
            git clone https://github.com/bangjur/tugas-devops.git
            cd tugas-devops
          else
            cd tugas-devops
            git fetch origin
            git reset --hard origin/main
          fi
          
          # Create virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          source venv/bin/activate
          
          # Install project dependencies if requirements.txt exists
          if [ -f requirements.txt ]; then
            python3 -m pip install --upgrade pip
            python3 -m pip install -r requirements.txt
          fi
          
          # Ensure Docker service is running
          cd docker/
          sudo systemctl start docker
          sudo systemctl enable docker
          
          # Build and deploy with Docker
          docker-compose down
          docker system prune -a --volumes -f
          docker-compose up --build -d
        EOF
    
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/id_ed25519
        rm -f ~/.ssh/known_hosts